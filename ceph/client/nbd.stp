
global flow;

/*
 0x7f5c7bf13eb1 : librbd::Image::aio_write(unsigned long, unsigned long, ceph::buffer::v14_2_0::list&, librbd::RBD::AioCompletion*)+0x3f9/0x54a [/home/tiger/ceph-v14.2.13/build/lib/librbd.so.1.12.0]
 0x55973131d1d3 : NBDServer::reader_entry()+0x927/0xd5a [/home/tiger/ceph-v14.2.13/build/bin/rbd-nbd]
 0x55973131e116 : NBDServer::ThreadHelper::entry()+0x66/0x7e [/home/tiger/ceph-v14.2.13/build/bin/rbd-nbd]
 0x7f5c7270389c : Thread::entry_wrapper()+0x78/0x80 [/home/tiger/ceph-v14.2.13/build/lib/libceph-common.so.0]
 0x7f5c7270381a : Thread::_entry_func(void*)+0x18/0x22 [/home/tiger/ceph-v14.2.13/build/lib/libceph-common.so.0]
 0x7f5c70dd7fa3 : start_thread+0xf3/0x3d0 [/usr/lib/x86_64-linux-gnu/libpthread-2.28.so]
 0x7f5c7073e4cf : clone+0x3f/0x60 [/usr/lib/x86_64-linux-gnu/libc-2.28.so]
*/

probe   process(@BIN_RBD).library("librbd*").function("librbd::Image::aio_write")
,   process(@BIN_RBD).library("librbd*").function("librbd::Image::aio_read")
{
#    printf("%s\n", user_string(@cast($this->ctx, "struct librbd::Image")->name->_M_dataplus->_M_p));
    printf("off=%d, len=%d\n", $off, $len);
    printf("%s -> %s\n", thread_indent(4), ppfunc());
    flow[task_current()] =  1;
}

probe   process(@BIN_RBD).library("librbd*").function("librbd::Image::aio_write").return
,   process(@BIN_RBD).library("librbd*").function("librbd::Image::aio_read").return
{
    if (flow[task_current()])
        flow[task_current()] = 0;
}


probe   process(@BIN_RBD).library("librbd*").function("librbd::*::*::*").call
,   process(@BIN_RBD).library("librbd*").function("librbd::*::*").call
,   process(@BIN_RBD).library("librbd*").function("librbd::*").call
,   process(@BIN_RBD).library("librados*").function("librados::*::*").call
,   process(@BIN_RBD).library("librados*").function("Objecter::*").call
{
    if (flow[task_current()]) {
        printf("%s -> %s\n", thread_indent(4), ppfunc());
    }
}

probe   process(@BIN_RBD).library("librbd*").function("librbd::*::*::*").return
,   process(@BIN_RBD).library("librbd*").function("librbd::*::*").return
,   process(@BIN_RBD).library("librbd*").function("librbd::*").return
,   process(@BIN_RBD).library("librados*").function("librados::*::*").return
,   process(@BIN_RBD).library("librados*").function("Objecter::*").return
{
    if (flow[task_current()]) {
        printf("%s <- %s\n", thread_indent(-4), ppfunc());
    }
}
