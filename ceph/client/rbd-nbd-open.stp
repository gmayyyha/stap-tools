#!/usr/bin/env stap

global flow;
global aio_flow;


probe   process(@BIN_NBD).library("librbd.so.*").function("librbd::RBD::open")
{
    flow[tid()] ++;
    printf("%s -> %s\n", thread_indent(4), ppfunc());
}

probe   process(@BIN_NBD).library("librbd.so.*").function("librbd::RBD::open").return
{
    flow[tid()] --;
}

probe   process(@BIN_NBD).library("librados.so.*").function("librados::C_AioComplete::finish")
{
    aio_flow[tid()] = 1
    printf("%s -> %s\n", thread_indent(4), ppfunc());
}

probe   process(@BIN_NBD).library("librados.so.*").function("librados::C_AioComplete::finish").return
{
    aio_flow[tid()] = 0
    printf("%s <- %s\n", thread_indent(-4), ppfunc());
}


probe   process(@BIN_NBD).library("librbd.so.*").function("Image::*").call
,   process(@BIN_NBD).library("librbd.so.*").function("ImageCtx::*").call
,   process(@BIN_NBD).library("librbd.so.*").function("io::*::*").call
,   process(@BIN_NBD).library("librbd.so.*").function("librbd::image::*::*").call
,   process(@BIN_NBD).library("librbd.so.*").function("ImageState*::*").call
,   process(@BIN_NBD).library("librbd.so.*").function("RBD::*").call
{
    if (flow[tid()] || aio_flow[tid()])
        printf("%s -> %s\n", thread_indent(4), ppfunc());
}

probe   process(@BIN_NBD).library("librbd.so.*").function("librbd::Image::*").return
,   process(@BIN_NBD).library("librbd.so.*").function("ImageCtx::*").return
,   process(@BIN_NBD).library("librbd.so.*").function("io::*::*").return
,   process(@BIN_NBD).library("librbd.so.*").function("librbd::image::*::*").return
,   process(@BIN_NBD).library("librbd.so.*").function("ImageState*::*").return
,   process(@BIN_NBD).library("librbd.so.*").function("RBD::*").return
{
    if (flow[tid()] || aio_flow[tid()])
        printf("%s <- %s\n", thread_indent(-4), ppfunc());
}
