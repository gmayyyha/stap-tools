global flow
global write_flow
global object_chunk

probe   process(@BIN_FUSE).function("ObjectCacher::release_set")
{
    flow[tid()] = 1;
    object_chunk = 0;
    printf("%s -> %s\n", thread_indent(4), ppfunc());
}

probe   process(@BIN_FUSE).function("ObjectCacher::release_set").return
{
    printf("%s <- %s\n", thread_indent(-4), ppfunc());
    flow[tid()] = 0;
}

probe   process(@BIN_FUSE).function("fuse_ll_write")
{
    write_flow[tid()] = 1
    printf("%s -> %s\n", thread_indent(4), ppfunc());
    printf("[%d, %d]\t", $off, $size)
}

probe   process(@BIN_FUSE).function("fuse_ll_write").return
{
    write_flow[tid()] = 0
    printf("%s <- %s\n", thread_indent(-4), ppfunc());
}

/*
*/
probe   process(@BIN_FUSE).function("ObjectCacher::*").call
,   process(@BIN_FUSE).function("Object::*").call
,   process(@BIN_FUSE).function("BufferHead::*").call
,   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::*").call
,   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::*::*").call
,   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::*::*::*").call
{
    if (flow[tid()]) {
        printf("%s -> %s\n", thread_indent(4), ppfunc());
    }
}

probe   process(@BIN_FUSE).function("ObjectCacher::*").return
,   process(@BIN_FUSE).function("Object::*").return
,   process(@BIN_FUSE).function("BufferHead::*").return
,   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::*").return
,   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::*::*").return
,   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::*::*::*").return
{
    if (flow[tid()]) {
        printf("%s <- %s\n", thread_indent(-4), ppfunc());
    }
}

/*
*/
probe   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::ptr::release")
{
    if (flow[tid()]) {
        printf("raw->len: %d\tdata: [%d, %d]\n", $this->_raw->len, $this->_off, $this->_len);
    }
}

probe   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::raw::~raw")
{
    if (flow[tid()]) {
        object_chunk ++;
    }
}

/*
*/
probe   process(@BIN_FUSE).function("ObjectCacher::bh_remove")
{
    if (flow[tid()]) {
        printf("object: %s\t", user_string($ob->oid->oid->name->_M_dataplus->_M_p));
        printf("bh->bl: %d\n", $bh->bl->_len);
    }
}

/*
probe   process(@BIN_FUSE).function("ObjectCacher::bh_remove").return
{
    if (flow[tid()]) {
    }
}

probe   process(@BIN_FUSE).function("BufferHead::BufferHead")
{
    if (flow[tid()]) {
        object_chunk = 0;
    }
}
*/

probe   process(@BIN_FUSE).function("BufferHead::~BufferHead").return
{
    if (flow[tid()]) {
        printf("object_chunk: %d\n", object_chunk);
        object_chunk = 0;
    }
}

probe   process(@BIN_FUSE).library("libceph-common*").function("ceph::buffer::*::raw_combined::raw_combined")
{
    if (write_flow[tid()]) {
        printf("%d\t%d\n", $l, $align)
    }
}
